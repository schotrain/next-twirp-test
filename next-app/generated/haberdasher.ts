// @generated by protobuf-ts 1.0.12
// @generated from protobuf file "haberdasher.proto" (package "twirp.example.haberdasher", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Size of a Hat, in inches.
 *
 * @generated from protobuf message twirp.example.haberdasher.Size
 */
export interface Size {
    /**
     * @generated from protobuf field: int32 inches = 1;
     */
    inches: number; // must be > 0
}
/**
 * A Hat is a piece of headwear made by a Haberdasher.
 *
 * @generated from protobuf message twirp.example.haberdasher.Hat
 */
export interface Hat {
    /**
     * @generated from protobuf field: int32 inches = 1;
     */
    inches: number;
    /**
     * @generated from protobuf field: string color = 2;
     */
    color: string; // anything but "invisible"
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string; // i.e. "bowler"
}
/**
 * Haberdasher service makes hats for clients.
 *
 * @generated from protobuf service twirp.example.haberdasher.Haberdasher
 */
export interface IHaberdasherClient {
    /**
     * MakeHat produces a hat of mysterious, randomly-selected color!
     *
     * @generated from protobuf rpc: MakeHat(twirp.example.haberdasher.Size) returns (twirp.example.haberdasher.Hat);
     */
    makeHat(input: Size, options?: RpcOptions): UnaryCall<Size, Hat>;
}
/**
 * Type for protobuf message twirp.example.haberdasher.Size
 */
class Size$Type extends MessageType<Size> {
    constructor() {
        super("twirp.example.haberdasher.Size", [
            { no: 1, name: "inches", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Size>): Size {
        const message = { inches: 0 };
        if (value !== undefined)
            reflectionMergePartial<Size>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Size): Size {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 inches */ 1:
                    message.inches = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Size, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 inches = 1; */
        if (message.inches !== 0)
            writer.tag(1, WireType.Varint).int32(message.inches);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Size = new Size$Type();
/**
 * Type for protobuf message twirp.example.haberdasher.Hat
 */
class Hat$Type extends MessageType<Hat> {
    constructor() {
        super("twirp.example.haberdasher.Hat", [
            { no: 1, name: "inches", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Hat>): Hat {
        const message = { inches: 0, color: "", name: "" };
        if (value !== undefined)
            reflectionMergePartial<Hat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hat): Hat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 inches */ 1:
                    message.inches = reader.int32();
                    break;
                case /* string color */ 2:
                    message.color = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 inches = 1; */
        if (message.inches !== 0)
            writer.tag(1, WireType.Varint).int32(message.inches);
        /* string color = 2; */
        if (message.color !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.color);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Hat = new Hat$Type();
/**
 * Haberdasher service makes hats for clients.
 *
 * @generated from protobuf service twirp.example.haberdasher.Haberdasher
 */
export class HaberdasherClient implements IHaberdasherClient {
    readonly typeName = "twirp.example.haberdasher.Haberdasher";
    readonly methods: MethodInfo[] = [
        { service: this, name: "MakeHat", localName: "makeHat", I: Size, O: Hat }
    ];
    constructor(private readonly _transport: RpcTransport) {
    }
    makeHat(input: Size, options?: RpcOptions): UnaryCall<Size, Hat> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<Size, Hat>("unary", this._transport, method, opt, i);
    }
}
