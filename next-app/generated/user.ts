// @generated by protobuf-ts 1.0.12
// @generated from protobuf file "user.proto" (package "nextTwirpTest.user", syntax proto3)
// tslint:disable
import { RpcTransport } from "@protobuf-ts/runtime-rpc";
import { MethodInfo } from "@protobuf-ts/runtime-rpc";
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf message nextTwirpTest.user.UserData
 */
export interface UserData {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: string givenName = 3;
     */
    givenName: string;
    /**
     * @generated from protobuf field: string familyName = 4;
     */
    familyName: string;
    /**
     * @generated from protobuf field: string imageUrl = 5;
     */
    imageUrl: string;
}
/**
 * @generated from protobuf message nextTwirpTest.user.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: nextTwirpTest.user.IdentityProvider identityProvider = 1;
     */
    identityProvider: IdentityProvider;
    /**
     * @generated from protobuf field: string accessToken = 2;
     */
    accessToken: string;
}
/**
 * @generated from protobuf message nextTwirpTest.user.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: nextTwirpTest.user.UserData userData = 1;
     */
    userData?: UserData;
}
/**
 * @generated from protobuf enum nextTwirpTest.user.IdentityProvider
 */
export enum IdentityProvider {
    /**
     * @generated from protobuf enum value: GOOGLE = 0;
     */
    GOOGLE = 0,
    /**
     * @generated from protobuf enum value: OKTA = 1;
     */
    OKTA = 1
}
/**
 * @generated from protobuf service nextTwirpTest.user.User
 */
export interface IUserClient {
    /**
     * @generated from protobuf rpc: Login(nextTwirpTest.user.LoginRequest) returns (nextTwirpTest.user.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
}
/**
 * Type for protobuf message nextTwirpTest.user.UserData
 */
class UserData$Type extends MessageType<UserData> {
    constructor() {
        super("nextTwirpTest.user.UserData", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "givenName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "familyName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserData>): UserData {
        const message = { id: "", email: "", givenName: "", familyName: "", imageUrl: "" };
        if (value !== undefined)
            reflectionMergePartial<UserData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserData): UserData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string givenName */ 3:
                    message.givenName = reader.string();
                    break;
                case /* string familyName */ 4:
                    message.familyName = reader.string();
                    break;
                case /* string imageUrl */ 5:
                    message.imageUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string givenName = 3; */
        if (message.givenName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.givenName);
        /* string familyName = 4; */
        if (message.familyName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.familyName);
        /* string imageUrl = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const UserData = new UserData$Type();
/**
 * Type for protobuf message nextTwirpTest.user.LoginRequest
 */
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("nextTwirpTest.user.LoginRequest", [
            { no: 1, name: "identityProvider", kind: "enum", T: () => ["nextTwirpTest.user.IdentityProvider", IdentityProvider] },
            { no: 2, name: "accessToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = { identityProvider: 0, accessToken: "" };
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* nextTwirpTest.user.IdentityProvider identityProvider */ 1:
                    message.identityProvider = reader.int32();
                    break;
                case /* string accessToken */ 2:
                    message.accessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* nextTwirpTest.user.IdentityProvider identityProvider = 1; */
        if (message.identityProvider !== 0)
            writer.tag(1, WireType.Varint).int32(message.identityProvider);
        /* string accessToken = 2; */
        if (message.accessToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const LoginRequest = new LoginRequest$Type();
/**
 * Type for protobuf message nextTwirpTest.user.LoginResponse
 */
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("nextTwirpTest.user.LoginResponse", [
            { no: 1, name: "userData", kind: "message", T: () => UserData }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = {};
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* nextTwirpTest.user.UserData userData */ 1:
                    message.userData = UserData.internalBinaryRead(reader, reader.uint32(), options, message.userData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* nextTwirpTest.user.UserData userData = 1; */
        if (message.userData)
            UserData.internalBinaryWrite(message.userData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const LoginResponse = new LoginResponse$Type();
/**
 * @generated from protobuf service nextTwirpTest.user.User
 */
export class UserClient implements IUserClient {
    readonly typeName = "nextTwirpTest.user.User";
    readonly methods: MethodInfo[] = [
        { service: this, name: "Login", localName: "login", I: LoginRequest, O: LoginResponse }
    ];
    constructor(private readonly _transport: RpcTransport) {
    }
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options), i = method.I.create(input);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, i);
    }
}
